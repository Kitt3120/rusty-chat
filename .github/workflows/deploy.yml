name: Deploy
on:
  push:
    branches: [main]
jobs:
  crates_io:
    name: Deploy crates.io
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Rust toolchain stable-x86_64-unknown-linux-gnu for ubuntu-latest
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable-x86_64-unknown-linux-gnu
          override: true
      - name: Publish to crates.io
        uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --token ${{ secrets.CRATES_IO_TOKEN }}
  github_release:
    name: Deploy GitHub
    runs-on: ubuntu-latest
    needs: [crates_io]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Rust toolchain stable-x86_64-unknown-linux-gnu for ubuntu-latest
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable-x86_64-unknown-linux-gnu
          override: true
      - name: Add x86_64-unknown-linux-gnu target
        run: rustup target add x86_64-unknown-linux-gnu
      - name: Add x86_64-apple-darwin target
        run: rustup target add x86_64-apple-darwin
      - name: Add x86_64-pc-windows-msvc target
        run: rustup target add x86_64-pc-windows-msvc
      - name: Package x86_64-unknown-linux-gnu
        uses: actions-rs/cargo@v1
        with:
          command: package
          args: --all-features --target x86_64-unknown-linux-gnu
      - name: Package x86_64-apple-darwin
        uses: actions-rs/cargo@v1
        with:
          command: package
          args: --all-features --target x86_64-apple-darwin
      - name: Package x86_64-pc-windows-msvc
        uses: actions-rs/cargo@v1
        with:
          command: package
          args: --all-features --target x86_64-pc-windows-msvc
      - name: Read version
        id: version
        run: echo "version=$(cargo read-manifest | jq -r .version)" >> $GITHUB_OUTPUT
      - name: zip x86_64-unknown-linux-gnu
        working-directory: target/x86_64-unknown-linux-gnu/release
        run: zip "${{ steps.version.outputs.version }}-x86_64-unknown-linux-gnu.zip" -r ./
      - name: zip x86_64-apple-darwin
        working-directory: target/x86_64-apple-darwin/release
        run: zip "${{ steps.version.outputs.version }}-x86_64-apple-darwin.zip" -r ./
      - name: zip x86_64-pc-windows-msvc
        working-directory: target/x86_64-pc-windows-msvc/release
        run: zip "${{ steps.version.outputs.version }}-x86_64-pc-windows-msvc.zip" -r ./
      - name: Move zip files
        run: |
          mkdir -p target/release
          mv "target/x86_64-unknown-linux-gnu/release/${{ steps.version.outputs.version }}-x86_64-unknown-linux-gnu.zip" target/release/
          mv "target/x86_64-apple-darwin/release/${{ steps.version.outputs.version }}-x86_64-apple-darwin.zip" target/release/
          mv "target/x86_64-pc-windows-msvc/release/${{ steps.version.outputs.version }}-x86_64-pc-windows-msvc.zip" target/release/
      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Provided by GitHub Actions
        run: gh release create "${{ github.ref }}" --repo="$GITHUB_REPOSITORY" --title="Release ${{ steps.version.outputs.version }}" --generate-notes --latest "./${{ steps.version.outputs.version }}-x86_64-unknown-linux-gnu.zip" "${{ steps.version.outputs.version }}-x86_64-apple-darwin.zip" "${{ steps.version.outputs.version }}-x86_64-pc-windows-msvc.zip"
